openapi: 3.0.1
info:
  title: Blog Api
  description: Blog Application
  version: "2.0"
servers:
- url: http://localhost:9191
  description: Generated server url
paths:
  /api/users/{userId}:
    get:
      tags:
      - user-controller
      operationId: getSingleUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
    put:
      tags:
      - user-controller
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
    delete:
      tags:
      - user-controller
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/posts/{postId}:
    get:
      tags:
      - post-controller
      operationId: getPostById
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PostDto'
    put:
      tags:
      - post-controller
      operationId: updatePost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PostDto'
    delete:
      tags:
      - post-controller
      operationId: deletePost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/categories/{catId}:
    get:
      tags:
      - category-controller
      operationId: getCategory
      parameters:
      - name: catId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CategoryDto'
    put:
      tags:
      - category-controller
      operationId: updateCategory
      parameters:
      - name: catId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CategoryDto'
    delete:
      tags:
      - category-controller
      operationId: deleteCategory
      parameters:
      - name: catId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/users/:
    get:
      tags:
      - user-controller
      operationId: getAllUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
    post:
      tags:
      - user-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
  /api/user/{userId}/category/{categoryId}/posts:
    post:
      tags:
      - post-controller
      operationId: createPost
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: categoryId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PostDto'
  /api/post/{postId}/comments:
    post:
      tags:
      - comment-controller
      operationId: createComment
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CommentDto'
  /api/post/image/upload/{postId}:
    post:
      tags:
      - post-controller
      operationId: uploadPostImage
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PostDto'
  /api/categories/:
    get:
      tags:
      - category-controller
      operationId: getCategories
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDto'
    post:
      tags:
      - category-controller
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CategoryDto'
  /api/user/{userId}/posts:
    get:
      tags:
      - post-controller
      operationId: getPostsByUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostDto'
  /api/posts:
    get:
      tags:
      - post-controller
      operationId: getAllPost
      parameters:
      - name: pageNumber
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: pageSize
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 5
      - name: sortBy
        in: query
        required: false
        schema:
          type: string
          default: postId
      - name: sortDir
        in: query
        required: false
        schema:
          type: string
          default: asc
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PostResponse'
  /api/posts/search/{keywords}:
    get:
      tags:
      - post-controller
      operationId: searchPostByTitle
      parameters:
      - name: keywords
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostDto'
  /api/post/image/{imageName}:
    get:
      tags:
      - post-controller
      operationId: downloadImage
      parameters:
      - name: imageName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /api/category/{categoryId}/posts:
    get:
      tags:
      - post-controller
      operationId: getPostsByCategory
      parameters:
      - name: categoryId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostDto'
  /api/:
    get:
      tags:
      - post-controller
      operationId: getAllUsers_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostDto'
  /api/comments/{commentId}:
    delete:
      tags:
      - comment-controller
      operationId: deleteComment
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponse'
components:
  schemas:
    UserDto:
      required:
      - about
      - name
      - password
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        email:
          type: string
        password:
          type: string
        about:
          type: string
    CategoryDto:
      required:
      - categoryDescription
      - categoryTitle
      type: object
      properties:
        categoryId:
          type: integer
          format: int32
        categoryTitle:
          maxLength: 2147483647
          minLength: 4
          type: string
        categoryDescription:
          maxLength: 2147483647
          minLength: 10
          type: string
    CommentDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        content:
          type: string
    PostDto:
      type: object
      properties:
        postId:
          type: integer
          format: int32
        title:
          type: string
        content:
          type: string
        imageName:
          type: string
        addedDate:
          type: string
          format: date-time
        category:
          $ref: '#/components/schemas/CategoryDto'
        user:
          $ref: '#/components/schemas/UserDto'
        comments:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/CommentDto'
    PostResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PostDto'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        lastPage:
          type: boolean
    ApiResponse:
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean
